"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@js-joda/core");

// globalDate is to be used for JavaScript's global 'Date' object to avoid name clashing with the 'Date' constant below
const globalDate = global.Date;

const EPOCH_DATE = _core.LocalDate.ofYearDay(1, 1);

const Date = {
  id: 0x28,
  type: 'DATEN',
  name: 'Date',
  declaration: function declaration() {
    return 'date';
  },
  writeTypeInfo: function writeTypeInfo(buffer) {
    buffer.writeUInt8(this.id);
  },
  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.
  writeParameterData: function writeParameterData(buffer, {
    value
  }, options, cb) {
    if (value != null) {
      buffer.writeUInt8(3);
      let date;

      if (options.useUTC) {
        date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());
      } else {
        date = _core.LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());
      }

      const days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);
      buffer.writeUInt24LE(days);
    } else {
      buffer.writeUInt8(0);
    }

    cb();
  },
  // TODO: value is techincally of type 'unknown'.
  validate: function validate(value) {
    if (value == null) {
      return null;
    }

    if (!(value instanceof globalDate)) {
      value = new globalDate(globalDate.parse(value));
    }

    if (isNaN(value)) {
      return new TypeError('Invalid date.');
    }

    return value;
  }
};
var _default = Date;
exports.default = _default;
module.exports = Date;