{"version":3,"file":"DriverModuleTest.js","sourceRoot":"","sources":["../DriverModuleTest.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Created by admin on 19/01/2017.\r\n */\r\nimport {Meta, SqlClient} from 'msnodesqlv8';\r\nimport SqlConnection = MsNodeSqlWrapperModule.SqlConnection;\r\nconst sql: SqlClient = require('msnodesqlv8');\r\nimport CommandResponse = MsNodeSqlWrapperModule.SqlCommandResponse;\r\nimport {MsNodeSqlWrapperModule} from \"../../lib/MsNodeSqWrapperModule\";\r\nimport SqlWrapper = MsNodeSqlWrapperModule.Sql;\r\n\r\nlet assert = require('assert');\r\nlet supp = require('./demo-support');\r\nlet ASQ = require('asynquence-contrib');\r\n\r\nclass eventHits {\r\n    public onMeta: number = 0;\r\n    public onColumn: number = 0;\r\n    public onRowCount: number = 0;\r\n    public onRow: number = 0;\r\n    public onDone: number = 0;\r\n    public onClosed: number = 0;\r\n    public onSubmitted: number = 0;\r\n    public onError: number = 0;\r\n}\r\n\r\nclass StoredProcedureDef {\r\n    constructor(public name: string, public def: string) {\r\n    }\r\n}\r\n\r\nclass WrapperTest {\r\n\r\n    conn_str: string = \"\";\r\n    support: any;\r\n    procedureHelper: any;\r\n    helper: any;\r\n    parsedJSON: any;\r\n    sqlWrapper:SqlWrapper;\r\n\r\n    getIntIntProcedure = new StoredProcedureDef(\r\n        'test_sp_get_int_int',\r\n        \"alter PROCEDURE <name>\" +\r\n        `(\r\n    @num1 INT,\r\n    @num2 INT,\r\n    @num3 INT OUTPUT\r\n    )\r\n    AS\r\n    BEGIN\r\n       SET @num3 = @num1 + @num2\r\n       RETURN 99;\r\n    END`);\r\n\r\n    bigIntProcedure = new StoredProcedureDef(\r\n        'bigint_test',\r\n        \"alter PROCEDURE <name>\" +\r\n        `(\r\n            @a bigint = 0,\r\n            @b bigint = 0 output\r\n         )\r\n        AS\r\n        BEGIN\r\n            set @b = @a\r\n            select @b as b\r\n        END`);\r\n\r\n    raiseErrorProcedure = new StoredProcedureDef(\r\n        'test_error',\r\n        \"alter PROCEDURE <name>\" +\r\n        `\r\n            as \r\n            begin\r\n\t            RAISERROR ('error', 16, 1);\r\n            end\r\n`);\r\n\r\n    constructor(public debug: boolean) {\r\n    }\r\n\r\n    expectedPrepared: any = [\r\n        {\r\n            \"len\": 4\r\n        }\r\n    ];\r\n\r\n    testPrepare: string = `select len(convert(varchar, ?)) as len`;\r\n    testSelect: string = `select 1+1 as v, convert(DATETIME, '2017-02-06') as d`;\r\n    expectedRows: any = [\r\n        {\r\n            \"v\": 2,\r\n            \"d\": new Date(Date.parse(\"Feb 06, 2017\"))\r\n        }\r\n    ];\r\n    expectedMeta = [\r\n        {\r\n            \"size\": 10,\r\n            \"name\": \"v\",\r\n            \"nullable\": true,\r\n            \"type\": \"number\",\r\n            \"sqlType\": \"int\"\r\n\r\n        },\r\n        {\r\n            \"size\": 23,\r\n            \"name\": \"d\",\r\n            \"nullable\": true,\r\n            \"type\": \"date\",\r\n            \"sqlType\": \"datetime\"\r\n        }\r\n    ];\r\n\r\n    private exec(done: Function): void {\r\n        let inst = this;\r\n        ASQ().runner(function*() {\r\n            yield inst.storedProcedureStress.apply(inst, [inst.raiseErrorProcedure, []]);\r\n            console.log(`storedProcedure ${inst.raiseErrorProcedure.name} completes. next....`);\r\n            yield inst.storedProcedure.apply(inst, [inst.bigIntProcedure, [1234567890], [0, 1234567890]]);\r\n            console.log(`storedProcedure ${inst.bigIntProcedure.name} completes. next....`);\r\n            yield inst.storedProcedure.apply(inst, [inst.getIntIntProcedure, [1, 2], [99, 3]]);\r\n            console.log(`storedProcedure ${inst.getIntIntProcedure.name} completes. next....`);\r\n            yield inst.execute.apply(inst);\r\n            console.log('execute completes next....');\r\n            yield inst.prepare.apply(inst);\r\n            console.log('prepare completes next....');\r\n            yield inst.eventSubscribe.apply(inst);\r\n            console.log('eventSubscribe completes next....');\r\n        }).val(() => {\r\n            done();\r\n        }).or((e: any) => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    public run(done: Function) {\r\n        supp.GlobalConn.init(sql, (co: any) => {\r\n                this.conn_str = co.conn_str;\r\n                this.sqlWrapper = new MsNodeSqlWrapperModule.Sql(this.conn_str);\r\n                this.support = co.support;\r\n                this.procedureHelper = new this.support.ProcedureHelper(this.conn_str);\r\n                this.procedureHelper.setVerbose(false);\r\n                this.helper = co.helper;\r\n                this.parsedJSON = this.helper.getJSON();\r\n                if (this.debug) console.log(this.conn_str);\r\n                this.exec(done);\r\n            }\r\n        );\r\n    }\r\n\r\n    private createProcedureDef(procedureDef: StoredProcedureDef): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.procedureHelper.createProcedure(procedureDef.name, procedureDef.def, function (e: any) {\r\n                if (e) reject(e);\r\n                else resolve()\r\n            });\r\n        });\r\n    }\r\n\r\n    private storedProcedureStress(procedureDef: StoredProcedureDef, params: any): Promise<any> {\r\n        let inst = this;\r\n        return new Promise((resolve, reject) => {\r\n            ASQ().runner(function*() {\r\n                let connection = yield inst.sqlWrapper.open();\r\n                let array: any = [];\r\n\r\n                yield inst.createProcedureDef(procedureDef);\r\n                let count = 100;\r\n                for (let i = 0; i < count; i++) {\r\n                    array.push(i);\r\n                }\r\n\r\n                let raised = 0;\r\n                let promises = array.map(() => {\r\n                    let command = connection.getCommand().procedure(procedureDef.name).params(params);\r\n                    // test should raise an error, or just don't exist at all\r\n                    return command.execute().catch((err: any) => {\r\n                        console.log(`[${raised}] ${JSON.stringify(err, null, 2)}`);\r\n                        ++raised;\r\n                    });\r\n                });\r\n                yield Promise.all(promises);\r\n            }).val(() => {\r\n                resolve();\r\n            }).or((e: any) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private storedProcedure(procedureDef: StoredProcedureDef, params: any, expected: any[]): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            let inst = this;\r\n            ASQ().runner(function*() {\r\n                let connection = yield inst.sqlWrapper.open();\r\n                yield inst.createProcedureDef.apply(inst, [procedureDef]);\r\n                let res = yield connection.getCommand().procedure(procedureDef.name).params(params).execute();\r\n                assert.deepEqual(res.outputParams, expected, \"results didn't match\");\r\n                yield connection.close();\r\n                resolve();\r\n            }).or((e: any) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private prepare(): Promise<any> {\r\n        let inst = this;\r\n        return new Promise((resolve, reject) => {\r\n            ASQ().runner(function *() {\r\n                let connection = yield inst.sqlWrapper.open();\r\n                let command = connection.getCommand().sql(inst.testPrepare);\r\n                command = yield command.prepare();\r\n                let res = yield command.params([1000]).execute();\r\n                assert.deepEqual(res.asObjects, inst.expectedPrepared, \"results didn't match\");\r\n                yield command.freePrepared();\r\n                yield connection.close();\r\n                resolve();\r\n            }).or((e: any) => {\r\n                    reject(e);\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    private execute(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.sqlWrapper.execute(this.testSelect).then(res => {\r\n                assert.deepEqual(res.asObjects, this.expectedRows, \"results didn't match\");\r\n                resolve();\r\n            }).catch(e => reject(e));\r\n        });\r\n    }\r\n\r\n    private eventSubscribe(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            let inst = this;\r\n\r\n            function runTest(c: SqlConnection) {\r\n                let command = c.getCommand();\r\n                command.sql(inst.testSelect);\r\n                let h = new eventHits();\r\n\r\n                command.onMeta((meta: Meta) => {\r\n                    if (inst.debug) console.log(`onMeta: ${JSON.stringify(meta, null, 2)}`);\r\n                    h.onMeta++;\r\n                    assert.deepEqual(inst.expectedMeta, meta, \"results didn't match\");\r\n                }).onColumn((colIndex: number, data:any, more:boolean) => {\r\n                    if (inst.debug) console.log(`onColumn: more = ${more} data = ${JSON.stringify(data, null, 2)}`);\r\n                    h.onColumn++;\r\n                }).onRowCount((count: number) => {\r\n                    if (inst.debug) console.log(`onRowCount: ${count}`);\r\n                    h.onRowCount++;\r\n                })\r\n                .onRow((r: number) => {\r\n                    if (inst.debug) console.log(`onRow: row = ${JSON.stringify(r, null, 2)}`);\r\n                    h.onRow++;\r\n                }).onDone(() => {\r\n                    if (inst.debug) console.log(`onDone:`);\r\n                    h.onDone++;\r\n                }).onSubmitted((s:any) => {\r\n                    if (inst.debug) console.log(`onSubmitted: ${JSON.stringify(s)}`);\r\n                    h.onSubmitted++;\r\n                }).onClosed(() => {\r\n                    if (inst.debug) console.log(`onClose:`);\r\n                    h.onClosed++;\r\n                }).onError((e: any) => {\r\n                    if (inst.debug) console.log(`onError: e = ${JSON.stringify(e, null, 2)}`);\r\n                    h.onError++;\r\n                }).execute().then((res: CommandResponse) => {\r\n                    if (inst.debug) console.log('==============================');\r\n                    if (inst.debug) console.log(JSON.stringify(res, null, 2));\r\n                    assert.deepEqual(res.asObjects, inst.expectedRows, \"results didn't match\");\r\n                    resolve();\r\n                }).catch((e: CommandResponse) => {\r\n                    h.onError++;\r\n                    if (inst.debug) console.log(JSON.stringify(e, null, 2));\r\n                    reject(e);\r\n                });\r\n            }\r\n\r\n            this.sqlWrapper.open()\r\n                .then((c : SqlConnection) => runTest(c)).catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nlet wt = new WrapperTest(true);\r\nwt.run(() => {\r\n    console.log('done.');\r\n});\r\n"]}