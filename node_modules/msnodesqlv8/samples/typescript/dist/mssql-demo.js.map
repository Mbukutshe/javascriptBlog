{"version":3,"file":"mssql-demo.js","sourceRoot":"","sources":["../mssql-demo.ts"],"names":[],"mappings":"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","sourcesContent":["import {Connection, Error, PreparedStatement, Query, SqlClient, QueryDescription, BulkTableMgr,} from 'msnodesqlv8';\r\n\r\n// require the module so it can be used in your node JS code.\r\nexport const sql: SqlClient = require('msnodesqlv8');\r\n\r\nlet supp = require('./demo-support');\r\n\r\n/*\r\n This demo assumes a SQL server database is available.  Modify the connection string below\r\n appropriately.  Note, for testing sqllocaldb can be very useful - here a sql server\r\n database can be run from the command line.\r\n for example :-\r\n sqllocaldb create node\r\n sqllocaldb start node\r\n sqllocaldb info node\r\n */\r\n\r\n// let test_conn_str = \"Driver={SQL Server Native Client 11.0};Server= np:\\\\\\\\.\\\\pipe\\\\LOCALDB#8765A478\\\\tsql\\\\query;Database={scratch};Trusted_Connection=Yes;\";\r\n\r\n// if you have a sqllocaldb running with instance called \"node\" and db \"scratch\" then\r\n// this will be used automatically.  To use another connection string for test\r\n// uncomment below.\r\n\r\nlet conn_str: string;\r\n\r\nlet demos = [\r\n    // open connection, simple query and close.\r\n    connection,\r\n    // prepared statements to repeat execute SQL with different params.\r\n    prepared,\r\n    // use the table manager to bind to a table and interact with it.\r\n    table,\r\n    // create and execute a stored procedure using pm.\r\n    procedure,\r\n    // query both ad hoc and via an open connection.\r\n    query,\r\n    // shows driver based events can be captured.\r\n    event,\r\n    // cancel a long running query\r\n    cancel\r\n];\r\n\r\ninterface Employee {\r\n    BusinessEntityID: number\r\n    NationalIDNumber: string\r\n    LoginID: string\r\n    OrganizationNode: any\r\n    OrganizationLevel: number,\r\n    JobTitle: string,\r\n    BirthDate: Date,\r\n    MaritalStatus: string,\r\n    Gender: string,\r\n    HireDate: string,\r\n    SalariedFlag: boolean,\r\n    VacationHours: number,\r\n    SickLeaveHours: number,\r\n    CurrentFlag: boolean,\r\n    rowguid: string,\r\n    ModifiedDate: Date\r\n}\r\n\r\nlet support: any = null;\r\nlet procedureHelper: any = null;\r\nlet helper: any = null;\r\nlet parsedJSON: Array<Employee> | null = null;\r\n\r\nsupp.GlobalConn.init(sql, (co: any) => {\r\n        conn_str = co.conn_str;\r\n        support = co.support;\r\n        procedureHelper = new support.ProcedureHelper(conn_str);\r\n        procedureHelper.setVerbose(false);\r\n        let async = co.async;\r\n        helper = co.helper;\r\n        parsedJSON = helper.getJSON('../../unit.tests/json');\r\n\r\n        console.log(conn_str);\r\n        async.series(demos, () => {\r\n            console.log(\"demo has finished.\");\r\n        });\r\n    }\r\n// to override an auto discovered sqllocaldb str assign above and uncomment below.\r\n// , test_conn_str\r\n);\r\n\r\nfunction event(done: Function): void {\r\n\r\n    let async = new support.Async();\r\n    let Assert = new support.Assert();\r\n    let conn: Connection;\r\n\r\n    let fns: Array<Function> = [\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"event begins ...... \");\r\n            async_done();\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"opening a connection ....\");\r\n            sql.open(conn_str, (err: Error, new_conn: Connection) => {\r\n                Assert.ifError(err);\r\n                conn = new_conn;\r\n                Assert.check(conn != null, \"connection from open is null.\");\r\n                console.log(\"... open\");\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"listen to the events raised from the driver\");\r\n            let s = \"select top 1 id, name, type, crdate from sysobjects so where so.type='U'\";\r\n            console.log(s);\r\n            let q = conn.query(s, (err: Error, res: Array<any>) => {\r\n                Assert.ifError(err);\r\n                console.log(\"res.length = \" + res.length);\r\n                console.log(res);\r\n                async_done();\r\n            });\r\n\r\n            q.on('meta', (meta: any) => {\r\n                console.log('event: meta[0].name = ' + meta[0].name);\r\n            });\r\n\r\n            q.on('column', (col: any) => {\r\n                console.log('event: column = ' + col);\r\n            });\r\n\r\n            q.on('partial', (col: any) => {\r\n                console.log('event: partial column = ' + col);\r\n            });\r\n\r\n            q.on('submitted', (q: string) => {\r\n                console.log('event: submitted query = ' + JSON.stringify(q));\r\n            });\r\n\r\n            q.on('rowcount', (count: any) => {\r\n                console.log('event: rowcount = ' + count);\r\n            });\r\n\r\n            q.on('row', (row: any) => {\r\n                console.log('event: row = ' + row);\r\n            });\r\n\r\n            q.on('done', () => {\r\n                console.log('event: done');\r\n            });\r\n\r\n            q.on('open', () => {\r\n                console.log('event: open');\r\n            });\r\n\r\n            q.on('closed', () => {\r\n                console.log('event: open');\r\n            });\r\n\r\n            q.on('error', (err: any) => {\r\n                console.log(JSON.stringify(err));\r\n            });\r\n\r\n            q.on('warning', (err: any) => {\r\n                console.log(JSON.stringify(err));\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"close connection.\");\r\n            conn.close(() => {\r\n                async_done()\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"...... event ends.\");\r\n            async_done();\r\n        }\r\n    ];\r\n\r\n    console.log(\"executing async set of functions .....\");\r\n    async.series(fns, () => {\r\n        console.log(\"..... async completes. \\n\\n\\n\\n\\n\\n\");\r\n        done();\r\n    })\r\n}\r\n\r\nfunction query(done: Function) {\r\n\r\n    let async = new support.Async();\r\n    let Assert = new support.Assert();\r\n\r\n    let conn: Connection;\r\n\r\n    let fns = [\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"query begins ...... \");\r\n            async_done();\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log('execute an ad hoc query with temporary connection.');\r\n            let q = \"declare @s NVARCHAR(MAX) = ?; select @s as s\";\r\n            sql.query(conn_str, q, ['node is great'], (err, res) => {\r\n                Assert.ifError(err);\r\n                console.log(res);\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"opening a connection ....\");\r\n            sql.open(conn_str, (err, new_conn) => {\r\n                Assert.ifError(err);\r\n                conn = new_conn;\r\n                Assert.check(conn != null, \"connection from open is null.\");\r\n                console.log(\"... open\");\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"use an open connection to call query()\");\r\n            let s = \"select top 1 id, name, type, crdate from sysobjects so where so.type='U'\";\r\n            console.log(s);\r\n            conn.query(s, (err, res) => {\r\n                Assert.ifError(err);\r\n                if (res) {\r\n                    console.log(\"res.length = \" + res.length);\r\n                    console.log(res);    \r\n                }\r\n\r\n                async_done();\r\n            })\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"use an open connection to call queryRaw()\");\r\n            let s = \"select top 1 id, name, type, crdate from sysobjects so where so.type='U'\";\r\n            console.log(s);\r\n            conn.queryRaw(s, (err, res) => {\r\n                Assert.ifError(err);\r\n                if (res) {\r\n                    console.log(\"res.length = \" + res.rows.length);\r\n                    console.log(res);\r\n                }\r\n                \r\n                async_done();\r\n            })\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log('use timeout to place limit on how long to wait for query.');\r\n            let queryObj: QueryDescription = {\r\n                query_str: \"waitfor delay \\'00:00:10\\';\",\r\n                query_timeout: 2\r\n            };\r\n\r\n            conn.query(queryObj, (err: any) => {\r\n                Assert.check(err != null);\r\n                Assert.check(err.message.indexOf('Query timeout expired') > 0);\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"close connection.\");\r\n            conn.close(() => {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"...... query ends.\");\r\n            async_done();\r\n        }\r\n    ];\r\n\r\n    console.log(\"executing async set of functions .....\");\r\n    async.series(fns, () => {\r\n        console.log(\"..... async completes. \\n\\n\\n\\n\\n\\n\");\r\n        done();\r\n    })\r\n}\r\n\r\nfunction procedure(done: Function) {\r\n\r\n    let async = new support.Async();\r\n    let Assert = new support.Assert();\r\n\r\n    let conn: Connection;\r\n\r\n    let sp_name = \"test_sp_get_int_int\";\r\n    let def = \"alter PROCEDURE <name>\" +\r\n        \"(\\n\" +\r\n        \"@num1 INT,\\n\" +\r\n        \"@num2 INT,\\n\" +\r\n        \"@num3 INT OUTPUT\\n\" +\r\n        \"\\n)\" +\r\n        \"AS\\n\" +\r\n        \"BEGIN\\n\" +\r\n        \"   SET @num3 = @num1 + @num2\\n\" +\r\n        \"   RETURN 99;\\n\" +\r\n        \"END\\n\";\r\n\r\n    let fns: ((async_done: Function) => any)[] = [\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"procedure begins ...... \");\r\n            async_done();\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"opening a connection ....\");\r\n            sql.open(conn_str, (err, new_conn) => {\r\n                Assert.ifError(err);\r\n                conn = new_conn;\r\n                Assert.check(conn != null, \"connection from open is null.\");\r\n                console.log(\"... open\");\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            def = def.replace(/<name>/g, sp_name);\r\n            console.log(\"create a procedure \" + sp_name);\r\n            console.log(def);\r\n            procedureHelper.createProcedure(sp_name, def, () => {\r\n                async_done();\r\n            })\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            let pm = conn.procedureMgr();\r\n            pm.callproc(sp_name, [10, 5], (err: Error, results: any, output: Array<any>) => {\r\n                Assert.ifError(err);\r\n                let expected = [99, 15];\r\n                console.log(output);\r\n                Assert.check(expected[0] == output[0], \"results didn't match\");\r\n                Assert.check(expected[1] == output[1], \"results didn't match\");\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            let pm = conn.procedureMgr();\r\n            console.log(\"describe procedure.\");\r\n            pm.describe(sp_name, summary => {\r\n                let s = JSON.stringify(summary, null, 2);\r\n                console.log(s);\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"close connection.\");\r\n            conn.close(() => {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"...... procedure ends.\");\r\n            async_done();\r\n        }\r\n    ];\r\n\r\n    console.log(\"executing async set of functions .....\");\r\n    async.series(fns, () => {\r\n        console.log(\"..... async completes. \\n\\n\\n\\n\\n\\n\");\r\n        done();\r\n    })\r\n}\r\n\r\nfunction connection(done: Function) {\r\n\r\n    let async = new support.Async();\r\n    let Assert = new support.Assert();\r\n\r\n    let conn: Connection;\r\n\r\n    let fns = [\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"connection begins ...... \");\r\n            async_done();\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"opening a connection ....\");\r\n            sql.open(conn_str, (err, new_conn) => {\r\n                Assert.ifError(err);\r\n                conn = new_conn;\r\n                Assert.check(conn != null, \"connection from open is null.\");\r\n                console.log(\"... open\");\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"fetch spid for the connection.\");\r\n            conn.query(\"select @@SPID as id, CURRENT_USER as name\", (err, res) => {\r\n                Assert.ifError(err);\r\n\r\n                if (res) {\r\n                    Assert.check(res.length == 1, \"unexpected result length.\");\r\n                    let sp = res[0]['id'];\r\n                    Assert.check(sp != null, \"did not find expected id.\");  \r\n                }\r\n                \r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"close connection.\");\r\n            conn.close(() => {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"...... connection ends.\");\r\n            async_done();\r\n        }\r\n    ];\r\n\r\n    console.log(\"executing async set of functions .....\");\r\n    async.series(fns, () => {\r\n        console.log(\"..... async completes. \\n\\n\\n\\n\\n\\n\");\r\n        done();\r\n    })\r\n}\r\n\r\nfunction empSelectSQL() {\r\n\r\n    return `SELECT [BusinessEntityID]\r\n     ,[NationalIDNumber]\r\n     ,[LoginID]\r\n     ,[OrganizationNode]\r\n     ,[OrganizationLevel]\r\n     ,[JobTitle]\r\n     ,[BirthDate]\r\n     ,[MaritalStatus]\r\n     ,[Gender]\r\n     ,[HireDate]\r\n     ,[SalariedFlag]\r\n     ,[VacationHours]\r\n     ,[SickLeaveHours]\r\n     ,[CurrentFlag]\r\n     ,[rowguid]\r\n     ,[ModifiedDate]\r\n     FROM [scratch].[dbo].[Employee]\r\n     WHERE BusinessEntityID = ?`;\r\n}\r\n\r\nfunction empDeleteSQL() {\r\n\r\n    return `DELETE FROM [scratch].[dbo].[Employee]\r\n        WHERE BusinessEntityID = ?`;\r\n}\r\n\r\ninterface Statements {\r\n    selectStatement?: PreparedStatement\r\n    deleteStatement?: PreparedStatement\r\n}\r\n\r\nfunction prepared(done: Function) {\r\n\r\n// create and populate table - fetch prepared statements to select and free records for employee table.\r\n// use the prepared statements to select and free rows.\r\n// free the statements and indicate this part of the demo has finished.\r\n\r\n    let async = new support.Async();\r\n    let Assert = new support.Assert();\r\n\r\n    function statementsFactory(): Statements {\r\n        return {\r\n        }\r\n    }\r\n\r\n    let statements:Statements = statementsFactory();\r\n\r\n    let table_name = \"Employee\";\r\n\r\n    let conn: Connection;\r\n\r\n    function employeePrepare(query: string, done: Function) {\r\n        conn.prepare(query, (err, ps) => {\r\n            Assert.ifError(err);\r\n            done(ps);\r\n        });\r\n    }\r\n\r\n    let fns = [\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"prepared begins ...... \");\r\n            async_done();\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"opening a connection ....\");\r\n            sql.open(conn_str, (err, new_conn) => {\r\n                Assert.ifError(err);\r\n                conn = new_conn;\r\n                Assert.check(conn != null, \"connection from open is null.\");\r\n                console.log(\"... open\");\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        // drop / create an Employee table.\r\n        function (async_done: Function) {\r\n            helper.dropCreateTable({\r\n                tableName: table_name\r\n            }, function () {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        // insert test set using bulk insert\r\n        function (async_done: Function) {\r\n            let tm = conn.tableMgr();\r\n            tm.bind(table_name, (bulkMgr: BulkTableMgr) => {\r\n                bulkMgr.insertRows(parsedJSON, () => {\r\n                    async_done();\r\n                });\r\n            });\r\n        },\r\n\r\n        // prepare a select statement.\r\n        function (async_done: Function) {\r\n            console.log(\"preparing a select statement.\");\r\n            employeePrepare(empSelectSQL(), (ps: PreparedStatement) => {\r\n                statements.selectStatement = ps;\r\n                async_done();\r\n            })\r\n        },\r\n\r\n        // prepare a free statement.\r\n        function (async_done: Function) {\r\n            console.log(\"preparing a free statement.\");\r\n            employeePrepare(empDeleteSQL(), (ps: PreparedStatement) => {\r\n                statements.deleteStatement = ps;\r\n                async_done();\r\n            })\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"check statements.\");\r\n            Assert.check(statements != null, \"prepared statement object is null.\");\r\n            Assert.check(statements.selectStatement != null, \"prepared select is null\");\r\n            Assert.check(statements.deleteStatement != null, \"prepared free is null\");\r\n            async_done();\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            let id = 1;\r\n            console.log(\"use prepared statement to fetch \" + id);\r\n            statements.selectStatement.preparedQuery([id], (err, res) => {\r\n                Assert.ifError(err);\r\n\r\n                if (res) {\r\n                    Assert.check(res.length == 1);\r\n                    console.log(res[0]);\r\n                }\r\n               \r\n                async_done();\r\n            })\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            let id = 2;\r\n            console.log(\"use prepared statement to fetch \" + id);\r\n            statements.selectStatement.preparedQuery([id], (err, res) => {\r\n                Assert.ifError(err);\r\n\r\n                if (res) {\r\n                    Assert.check(res.length == 1);\r\n                    console.log(res[0]);    \r\n                }\r\n                \r\n                async_done();\r\n            })\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            let id = 5;\r\n            console.log(\"use prepared statement to free \" + id);\r\n            statements.deleteStatement.preparedQuery([id], err => {\r\n                Assert.ifError(err);\r\n                async_done();\r\n            })\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"check how many rows are left.\");\r\n            conn.query(\"select * from Employee\", (err, res) => {\r\n                Assert.ifError(err);\r\n\r\n                if (res) {\r\n                    console.log(\"returned rows \" + res.length);\r\n                    Assert.check(res.length == 9, \"one row should have been deleted.\");   \r\n                }\r\n               \r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"free statements\");\r\n            statements.selectStatement.free(() => {\r\n                statements.deleteStatement.free(() => {\r\n                    async_done();\r\n                })\r\n            })\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"close connection.\");\r\n            conn.close(() => {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"...... prepared ends.\");\r\n            async_done();\r\n        }\r\n    ];\r\n\r\n    console.log(\"executing async set of functions .....\");\r\n    async.series(fns, () => {\r\n        console.log(\"..... async completes. \\n\\n\\n\\n\\n\\n\");\r\n        done();\r\n    });\r\n}\r\n\r\nfunction table(done: Function) {\r\n\r\n    let async = new support.Async();\r\n    let Assert = new support.Assert();\r\n    let helper = new support.EmployeeHelper(sql, conn_str);\r\n    let conn: Connection;\r\n    let table_name = \"Employee\";\r\n    let bm: BulkTableMgr;\r\n    let records : Array<Employee>= helper.getJSON();\r\n\r\n\r\n    let fns = [\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"table begins ...... \");\r\n            async_done();\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"opening a connection ....\");\r\n            sql.open(conn_str, (err, new_conn) => {\r\n                Assert.ifError(err);\r\n                conn = new_conn;\r\n                Assert.check(conn != null, \"connection from open is null.\");\r\n                console.log(\"... open\");\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"create an employee table.\");\r\n            helper.dropCreateTable({\r\n                tableName: table_name\r\n            }, function () {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            let tm = conn.tableMgr();\r\n            console.log(\"bind to table \" + table_name);\r\n            tm.bind(table_name, (bulk: BulkTableMgr) => {\r\n                bm = bulk;\r\n                Assert.check(bm, \"no bulk manager returned.\");\r\n                async_done();\r\n            })\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"bulk insert records.\");\r\n            bm.insertRows(records, () => {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"check rows have been inserted.\");\r\n            conn.query(\"select * from \" + table_name, (err, res) => {\r\n                Assert.ifError(err);\r\n\r\n                if (res) {\r\n                    Assert.check(res.length == records.length);\r\n                }\r\n                \r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"update a column.\");\r\n            let newDate = new Date(\"2015-01-01T00:00:00.000Z\");\r\n            let modifications: Array<any> = [];\r\n            records.forEach((emp: Employee) => {\r\n                emp.ModifiedDate = newDate;\r\n                modifications.push({\r\n                    BusinessEntityID: emp.BusinessEntityID,\r\n                    ModifiedDate: newDate\r\n                });\r\n            });\r\n\r\n            let updateCols = [\r\n                {\r\n                    name: 'ModifiedDate'\r\n                }\r\n            ];\r\n\r\n            bm.setUpdateCols(updateCols);\r\n            bm.updateRows(modifications, () => {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        // use the select signature to construct a prepared query.\r\n\r\n        function (async_done: Function) {\r\n            let summary = bm.getSummary();\r\n            let s = JSON.stringify(summary, null, 2);\r\n            console.log(s);\r\n            console.log(summary.selectSignature);\r\n            console.log(\"prepare the above statement.\");\r\n            let select: string = summary.selectSignature;\r\n            conn.prepare(select, (err: Error, ps: PreparedStatement) => {\r\n                Assert.ifError(err);\r\n                ps.preparedQuery([1], (err, res) => {\r\n                    Assert.ifError(err);\r\n                    \r\n                    if (res) {\r\n                        Assert.check(res.length == 1);\r\n                    }\r\n                    \r\n                    async_done();\r\n                });\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"free the records using bulk operation.\");\r\n            let keys = helper.extractKey(records, 'BusinessEntityID');\r\n            bm.deleteRows(keys, () => {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"check rows have been deleted.\");\r\n            conn.query(\"select * from \" + table_name, (err, res) => {\r\n                Assert.ifError(err);\r\n\r\n                if (res) {\r\n                    Assert.check(res.length == 0);\r\n                }\r\n                \r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"close connection.\");\r\n            conn.close(() => {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"...... table ends.\");\r\n            async_done();\r\n        }\r\n    ];\r\n\r\n    console.log(\"executing async set of functions .....\");\r\n    async.series(fns, () => {\r\n        console.log(\"..... async completes. \\n\\n\\n\\n\\n\\n\");\r\n        done();\r\n    });\r\n}\r\n\r\nfunction cancel(done: Function): void {\r\n\r\n    let async = new support.Async();\r\n    let Assert = new support.Assert();\r\n    let conn: Connection;\r\n\r\n    let fns: Array<Function> = [\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"cancel begins ...... \");\r\n            async_done();\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"opening a connection ....\");\r\n            sql.open(conn_str, (err: Error, new_conn: Connection) => {\r\n                Assert.ifError(err);\r\n                conn = new_conn;\r\n                Assert.check(conn, \"connection from open is null.\");\r\n                console.log(\"... open\");\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"use an open connection to call query(), then cancel it\");\r\n            let q: Query = conn.query(sql.PollingQuery(\"waitfor delay \\'00:00:20\\';\"), err => {\r\n                if (err) {\r\n                    Assert.check(err.message.indexOf('Operation canceled') > 0);\r\n                }\r\n                \r\n                async_done();\r\n            });\r\n\r\n            conn.cancelQuery(q,  err => {\r\n                Assert.ifError(err);\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"cancel using query identifier.\");\r\n            let q: Query = conn.query(sql.PollingQuery(\"waitfor delay \\'00:00:20\\';\"), function (err) {\r\n                if (err) {\r\n                    Assert.check(err.message.indexOf('Operation canceled') > 0);\r\n                }\r\n                \r\n                async_done();\r\n            });\r\n\r\n            q.cancelQuery( err => {\r\n                Assert.ifError(err);\r\n            });\r\n        },\r\n\r\n        function (async_done:Function) {\r\n            console.log(\"cancel a prepared statement.\");\r\n            let s = \"waitfor delay ?;\";\r\n            let prepared: PreparedStatement;\r\n\r\n            let fns :Function[] = [\r\n                function (async_done:Function) {\r\n                    conn.prepare(sql.PollingQuery(s), (err: Error, pq: PreparedStatement) => {\r\n                        Assert.check(!err);\r\n                        prepared = pq;\r\n                        async_done();\r\n                    });\r\n                },\r\n\r\n                function (async_done:Function) {\r\n                    let q: Query = prepared.preparedQuery(['00:00:20'], (err: Error) => {\r\n                        Assert.check(err.message.indexOf('Operation canceled') > 0);\r\n                        async_done();\r\n                    });\r\n\r\n                    q.on('submitted', function () {\r\n                        q.cancelQuery((e: Error) => {\r\n                            Assert.ifError(e);\r\n                        });\r\n                    });\r\n                }\r\n            ];\r\n\r\n            async.series(fns, () => {\r\n                async_done();\r\n            })\r\n        },\r\n\r\n        function(async_done:Function) {\r\n            console.log(\"cancel a stored proc.\");\r\n\r\n            let sp_name = \"test_spwait_for\";\r\n\r\n            let def = \"alter PROCEDURE <name>\" +\r\n                \"(\\n\" +\r\n                \"@timeout datetime\" +\r\n                \"\\n)\" +\r\n                \"AS\\n\" +\r\n                \"BEGIN\\n\" +\r\n                \"waitfor delay @timeout;\" +\r\n                \"END\\n\";\r\n\r\n            let fns: Function[] = [\r\n                function (async_done: Function) {\r\n                    procedureHelper.createProcedure(sp_name, def, function () {\r\n                        async_done();\r\n                    });\r\n                },\r\n\r\n                function (async_done: Function) {\r\n                    let pm = conn.procedureMgr();\r\n                    pm.setPolling(true);\r\n                    let q: Query = pm.callproc(sp_name, ['0:0:20'], function (err) {\r\n                        Assert.check(err);\r\n                        \r\n                        if (err) {\r\n                            Assert.check(err.message.indexOf('Operation canceled') > 0);\r\n                        }\r\n                        \r\n                        async_done();\r\n                    });\r\n                    q.on('submitted', function () {\r\n                        q.cancelQuery(function (err) {\r\n                            Assert.check(!err);\r\n                        });\r\n                    });\r\n                }\r\n            ];\r\n\r\n            async.series(fns, function () {\r\n                async_done();\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"close connection.\");\r\n            conn.close(() => {\r\n                async_done()\r\n            });\r\n        },\r\n\r\n        function (async_done: Function) {\r\n            console.log(\"...... cancel ends.\");\r\n            async_done();\r\n        }\r\n    ];\r\n\r\n    console.log(\"executing async set of functions .....\");\r\n    async.series(fns, () => {\r\n        console.log(\"..... async completes. \\n\\n\\n\\n\\n\\n\");\r\n        done();\r\n    })\r\n}"]}