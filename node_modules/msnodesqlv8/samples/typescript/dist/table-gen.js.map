{"version":3,"file":"table-gen.js","sourceRoot":"","sources":["../table-gen.ts"],"names":[],"mappings":";;AAEA,MAAM,GAAG,GAAc,OAAO,CAAC,aAAa,CAAC,CAAC;AAC9C,IAAI,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,IAAI,IAAI,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACrC,IAAI,GAAG,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAExC,2EAAuE;AAYvE,IAAK,UAOJ;AAPD,WAAK,UAAU;IACX,yCAAO,CAAA;IACP,2CAAQ,CAAA;IACR,+CAAU,CAAA;IACV,+CAAU,CAAA;IACV,iDAAU,CAAA;IACV,yCAAO,CAAA;AACX,CAAC,EAPI,UAAU,KAAV,UAAU,QAOd;AAGD;IAAA;QAEW,YAAO,GAAW,EAAE,CAAC;QACrB,WAAM,GAAW,EAAE,CAAC;QAC3B,aAAQ,GAAW,EAAE,CAAC;IAmR1B,CAAC;IA/QW,IAAI;QAER,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;gBAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAO,EAAE,EAAE;gBAClC,EAAE,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC;oBAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACjC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;gBAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,8CAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAChE,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;IACN,CAAC;IAEM,IAAI,CAAC,UAAiB;QAEzB,MAAM,CAAC,IAAI,OAAO,CAAa,CAAC,OAAO,EAAC,MAAM,EAAC,EAAE;YAC7C,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;gBAC/B,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC;YACL,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IAEM,IAAI,CAAC,IAAe;QAEvB,MAAM,CAAC,IAAI,OAAO,CAAe,CAAC,OAAO,EAAE,MAAM,EAAC,EAAE;YAChD,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACzB,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;YAC/B,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAe,EAAE,EAAE;gBAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;oBACZ,OAAO,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC;gBAAA,IAAI,CAAC,CAAC;oBACH,MAAM,CAAC,kBAAkB,KAAK,EAAE,CAAC,CAAA;gBACrC,CAAC;YACL,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IAEO,MAAM,CAAC,UAAU,CAAC,SAAgB;QACtC,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,QAAQ,GAAG,gEAAgE,CAAC;QAChF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,YAAY,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;YAC9D,IAAI,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;QAEzE,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,MAAM,CAAC,SAAS,CAAC,MAAkB;QAEvC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAClB,KAAK,KAAK;gBACN,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAE7C,KAAK,KAAK;gBACN,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAEjD,KAAK,UAAU;gBACX,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;YAE5D,KAAK,MAAM;gBACP,MAAM,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAEpI,KAAK,SAAS;gBACV,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAEjD,KAAK,WAAW;gBACZ,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7E,CAAC;IACL,CAAC;IAEO,MAAM,CAAC,CAAQ,EAAE,MAAqB;QAC1C,IAAI,GAAG,GAAgB,EAAE,CAAC;QAC1B,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACb,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;QACjD,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACd,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAEM,IAAI,CAAC,MAAqB,EAAE,CAAQ;QACvC,IAAI,CAAC,GAAS,EAAE,CAAC;QACjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC;QACD,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAEM,MAAM,CAAC,EAAgB,EAAE,GAAS;QACrC,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE;gBACvB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC;gBAAA,IAAI,CAAC,CAAC;oBACH,OAAO,EAAE,CAAC;gBACd,CAAC;YACL,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IAEM,QAAQ,CAAC,IAAW;QACvB,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,GAAG,GAAS,EAAE,CAAC;YACnB,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;gBAClB,IAAI,IAAI,GAAe,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACtD,IAAI,CAAC,GAAgB,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC3C,IAAI,OAAO,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;gBAC7B,IAAI,MAAM,GAAkB,OAAO,CAAC,OAAO,CAAC;gBAC5C,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC9B,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBAC1B,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAM,EAAE,EAAE;gBACb,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBACvB,MAAM,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;IACN,CAAC;IAEM,MAAM;QAET,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;gBAClB,IAAI,OAAO,GAAc,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAC3C,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBAC7B,IAAI,UAAU,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC1C,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;gBAC1D,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC9B,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;gBACzD,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBAChC,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;gBACzB,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAkB,EAAE,EAAE;gBACzB,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;IACN,CAAC;IAEM,GAAG;QACN,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;YACxC,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,MAAM,GAAY,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;YAC3C,IAAI,IAAI,GAAW,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;YACtC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;gBAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACpB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACT,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;oBAC9C,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;gBACxB,CAAC;gBACD,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;oBACX,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;oBAChD,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC9B,CAAC;gBACD,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAkB,EAAE,EAAE;gBACzB,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;IACN,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,IAAY,EAAE,OAAgB;QAC3C,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC;QAC1B,IAAI,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;QACzC,MAAM,CAAC,GAAG,IAAI,GAAG,OAAO,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,KAAa,EAAE,OAAgB;QAC3C,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,YAAY,KAAK,GAAG,EAAC,OAAO,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,KAAa,EAAE,OAAgB;QAC5C,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,aAAa,KAAK,GAAG,EAAC,OAAO,CAAC,CAAC;IACnE,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAa,EAAE,OAAgB;QACxC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,KAAK,GAAG,EAAC,OAAO,CAAC,CAAC;IAC/D,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,KAAa,EAAE,SAAgB,EAAE,OAAgB;QAC5D,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,WAAW,KAAK,KAAK,SAAS,GAAG,EAAC,OAAO,CAAC,CAAC;IAC/E,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,OAAgB;QACxB,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,EAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,OAAgB;QACvB,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,EAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,OAAgB;QACvB,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,EAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAAgB;QAC5B,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAC,OAAO,CAAC,CAAC;IACxD,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,KAAY,EAAE,OAAmB;QACnD,IAAI,CAAC,GAAU,IAAI,CAAC;QACpB,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACd,KAAK,UAAU,CAAC,MAAM;gBAClB,CAAC,GAAG,WAAW,KAAK,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC;gBAC5D,KAAK,CAAC;YAEV,KAAK,UAAU,CAAC,OAAO;gBACnB,CAAC,GAAG,WAAW,KAAK,IAAI,cAAc,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC;gBAC/D,KAAK,CAAC;YAEV,KAAK,UAAU,CAAC,IAAI;gBAChB,CAAC,GAAG,WAAW,KAAK,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBACpD,KAAK,CAAC;YAEV,KAAK,UAAU,CAAC,GAAG;gBACf,CAAC,GAAG,WAAW,KAAK,IAAI,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACnD,KAAK,CAAC;YAEV,KAAK,UAAU,CAAC,MAAM;gBAClB,CAAC,GAAG,WAAW,KAAK,IAAI,cAAc,CAAC,SAAS,CAAC,GAAG,EAAC,IAAI,CAAC,EAAE,CAAC;gBAC7D,KAAK,CAAC;YAEV,KAAK,UAAU,CAAC,GAAG;gBACf,CAAC,GAAG,WAAW,KAAK,IAAI,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACnD,KAAK,CAAC;QACd,CAAC;QACD,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,GAAU,EAAE,GAAU;QAC7C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IAC7D,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,KAAY;QAC7B,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,CAAA;IAC1D,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,KAAY;QACzB,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;IAClF,CAAC;IAEM,QAAQ,CAAC,IAAS;QAErB,IAAI,OAAO,GAAW,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;QACzC,IAAI,MAAM,GAAW,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;QAC1C,IAAI,KAAK,GAAW,IAAI,CAAC,KAAK,IAAI,YAAY,CAAC;QAC/C,IAAI,MAAM,GAAY,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,GAAG,MAAM,IAAI,KAAK,EAAE,CAAC;QAE1C,IAAI,CAAC,OAAO,GAAG;gBACP,IAAI,CAAC,aAAa;iBACjB,IAAI,CAAC,aAAa;CAClC,CAAC;QACM,IAAI,IAAI,GAAY,EAAE,CAAC;QACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QAC/F,CAAC;QAED,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG;eACP,IAAI,CAAC,aAAa;MAC3B,IAAI;;;GAGP,CAAC;IACA,CAAC;CACJ;AAED,IAAI,IAAI,GAAW,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AAChD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACP,OAAO,CAAC,GAAG,CAAC,uEAAuE,CAAC,CAAC;IACrF,OAAO,CAAC,GAAG,CAAC,+EAA+E,CAAC,CAAC;IAC7F,OAAO,CAAC,GAAG,CAAC,+GAA+G,CAAC,CAAC;AACjI,CAAC;AAAA,IAAI,CAAC,CAAC;IACH,IAAI,CAAC,GAAG,IAAI,cAAc,EAAE,CAAC;IAC7B,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;QACjB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;QACT,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;IAClB,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import {BulkTableMgr, Connection, TableColumn} from \"../../lib\";\r\n\r\nconst sql: SqlClient = require('msnodesqlv8');\r\nlet argv = require('minimist')(process.argv.slice(2));\r\nlet supp = require('./demo-support');\r\nlet ASQ = require('asynquence-contrib');\r\n\r\nimport {MsNodeSqlWrapperModule} from \"../../lib/MsNodeSqWrapperModule\";\r\nimport SqlWrapper = MsNodeSqlWrapperModule.Sql;\r\nimport CommandResponse = MsNodeSqlWrapperModule.SqlCommandResponse;\r\n\r\ninterface LooseObject {\r\n    [key: string]: any\r\n}\r\n\r\nimport {\r\n    SqlClient\r\n} from 'msnodesqlv8';\r\n\r\nenum ColumnType {\r\n    bit = 0,\r\n    date = 1,\r\n    string = 2,\r\n    binary = 3,\r\n    decimal =4,\r\n    int = 5\r\n}\r\n\r\n\r\nclass TableGenerator {\r\n\r\n    public dropSql: string = '';\r\n    public defSql: string = '';\r\n    conn_str: string = \"\";\r\n    sqlWrapper:SqlWrapper;\r\n    public qualifiedName:string;\r\n\r\n    private init() : Promise<SqlWrapper>\r\n    {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.sqlWrapper != null) resolve(this.sqlWrapper);\r\n            supp.GlobalConn.init(sql, (co: any) => {\r\n                if (co == null) reject('no db.');\r\n                this.conn_str = co.conn_str;\r\n                this.sqlWrapper = new MsNodeSqlWrapperModule.Sql(this.conn_str);\r\n                resolve(this.sqlWrapper);\r\n            });\r\n        })\r\n    }\r\n\r\n    public open(connString:string) : Promise<Connection>\r\n    {\r\n        return new Promise<Connection>((resolve,reject)=> {\r\n            sql.open(connString, (err, conn) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(conn);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public bind(conn:Connection) : Promise<BulkTableMgr>\r\n    {\r\n        return new Promise<BulkTableMgr>((resolve, reject)=> {\r\n            let tm = conn.tableMgr();\r\n            let table = this.qualifiedName;\r\n            tm.bind(table, (t :BulkTableMgr) => {\r\n                if (t != null) {\r\n                    resolve(t);\r\n                }else {\r\n                    reject(`cannot resolve ${table}`)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    private static makeString(maxLength:number): string {\r\n        let text = \"\";\r\n        let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n        for (let i = 0; i < TableGenerator.getRandomInt(1, maxLength); i++)\r\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n        return text;\r\n    }\r\n\r\n    private static getColumn(column:TableColumn) : any\r\n    {\r\n        switch (column.type) {\r\n            case 'bit':\r\n                return TableGenerator.getRandomInt(0, 1);\r\n\r\n            case 'int':\r\n                return TableGenerator.getRandomInt(0, 10000);\r\n\r\n            case 'nvarchar':\r\n                return TableGenerator.makeString(column.max_length / 2);\r\n\r\n            case 'date':\r\n                return new Date(TableGenerator.getRandomInt(1970, 2100), TableGenerator.getRandomInt(0, 11), TableGenerator.getRandomInt(1, 28))\r\n\r\n            case 'decimal':\r\n                return TableGenerator.getRandomInt(0, 10000);\r\n\r\n            case 'varbinary':\r\n                return Buffer.from(TableGenerator.makeString(column.max_length / 2));\r\n        }\r\n    }\r\n\r\n    private single(i:number, schema: TableColumn[]) : Object {\r\n        let obj: LooseObject = {};\r\n        schema.map(col => {\r\n            obj[col.name] = TableGenerator.getColumn(col)\r\n        });\r\n        obj['ID'] = i;\r\n        return obj;\r\n    }\r\n\r\n    public rows(schema: TableColumn[], n:Number) : any[] {\r\n        let v:any[] = [];\r\n        for (let i = 0; i < n; ++i) {\r\n            v[v.length] = this.single(i + 1, schema);\r\n        }\r\n        return v;\r\n    }\r\n\r\n    public insert(tm: BulkTableMgr, vec:any[]) : Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            tm.insertRows(vec, (err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }else {\r\n                    resolve();\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    public populate(rows:number) : Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            let inst = this;\r\n            let vec:any[] = [];\r\n            ASQ().runner(function*() {\r\n                let conn: Connection = yield inst.open(inst.conn_str);\r\n                let t:BulkTableMgr = yield inst.bind(conn);\r\n                let summary = t.getSummary();\r\n                let schema :TableColumn[] = summary.columns;\r\n                vec = inst.rows(schema, rows);\r\n                yield inst.insert(t, vec);\r\n                console.log('finished.');\r\n            }).or((e: any) => {\r\n                console.log(e.message);\r\n                reject(vec);\r\n            });\r\n        })\r\n    }\r\n\r\n    public create() : Promise<any>\r\n    {\r\n        return new Promise<any>((resolve, reject) => {\r\n            let inst = this;\r\n            ASQ().runner(function*() {\r\n                let wrapper:SqlWrapper = yield inst.init();\r\n                console.log('open question');\r\n                let connection = yield wrapper.open();\r\n                console.log(`drop table ${inst.dropSql}`);\r\n                yield connection.getCommand().sql(inst.dropSql).execute();\r\n                console.log('create table');\r\n                console.log(`${inst.defSql}`);\r\n                yield connection.getCommand().sql(inst.defSql).execute();\r\n                console.log('close connection');\r\n                yield connection.close();\r\n                resolve();\r\n            }).or((e: CommandResponse) => {\r\n                reject(e);\r\n            });\r\n        })\r\n    }\r\n\r\n    public run() : Promise<any> {\r\n        return new Promise<any>((reject, resolve) => {\r\n            let inst = this;\r\n            let create: boolean = argv.create || false;\r\n            let rows: number = argv.populate || 0;\r\n            ASQ().runner(function*() {\r\n                inst.generate(argv);\r\n                if (create) {\r\n                    console.log(`creating ${inst.qualifiedName}`);\r\n                    yield inst.create();\r\n                }\r\n                if (rows > 0) {\r\n                    console.log(`populating ${inst.qualifiedName}`);\r\n                    yield inst.populate(rows);\r\n                }\r\n                resolve();\r\n            }).or((e: CommandResponse) => {\r\n                reject(e);\r\n            });\r\n        })\r\n    }\r\n\r\n    static colOfType(type: string, notNull: boolean) {\r\n        notNull = notNull || true;\r\n        let postFix = notNull ? ' NOT NULL' : '';\r\n        return `${type}${postFix}`;\r\n    }\r\n\r\n    static nvarchar(width: number, notNull: boolean) {\r\n        return TableGenerator.colOfType(`nvarchar(${width})`,notNull);\r\n    }\r\n\r\n    static varbinary(width: number, notNull: boolean) {\r\n        return TableGenerator.colOfType(`varbinary(${width})`,notNull);\r\n    }\r\n\r\n    static nchar(width: number, notNull: boolean) {\r\n        return TableGenerator.colOfType(`nchar(${width})`,notNull);\r\n    }\r\n\r\n    static decimal(width: number, precision:number, notNull: boolean) {\r\n        return TableGenerator.colOfType(`decimal(${width}, ${precision})`,notNull);\r\n    }\r\n\r\n    static date(notNull: boolean) {\r\n        return TableGenerator.colOfType('date',notNull);\r\n    }\r\n\r\n    static int(notNull: boolean) {\r\n        return TableGenerator.colOfType('int',notNull);\r\n    }\r\n\r\n    static bit(notNull: boolean) {\r\n        return TableGenerator.colOfType('bit',notNull);\r\n    }\r\n\r\n    static smallint(notNull: boolean) {\r\n        return TableGenerator.colOfType('smallint',notNull);\r\n    }\r\n\r\n    static fromColumnType(index:number, colType: ColumnType ): string {\r\n        let c:string = null;\r\n        switch (colType) {\r\n            case ColumnType.string:\r\n                c = `col_str_${index} ${TableGenerator.nvarchar(20, true)}`;\r\n                break;\r\n\r\n            case ColumnType.decimal:\r\n                c = `col_dec_${index} ${TableGenerator.decimal(34, 18, true)}`;\r\n                break;\r\n\r\n            case ColumnType.date:\r\n                c = `col_dat_${index} ${TableGenerator.date(true)}`;\r\n                break;\r\n\r\n            case ColumnType.bit:\r\n                c = `col_bit_${index} ${TableGenerator.bit(true)}`;\r\n                break;\r\n\r\n            case ColumnType.binary:\r\n                c = `col_bin_${index} ${TableGenerator.varbinary(100,true)}`;\r\n                break;\r\n\r\n            case ColumnType.int:\r\n                c = `col_int_${index} ${TableGenerator.int(true)}`;\r\n                break;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    public static getRandomInt(min:number, max:number) :number {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    static roundRobinCol(index:number ): string {\r\n        return TableGenerator.fromColumnType(index, index % 6)\r\n    }\r\n\r\n    static randomCol(index:number ): string {\r\n        return TableGenerator.fromColumnType(index, TableGenerator.getRandomInt(0, 5))\r\n    }\r\n\r\n    public generate(argv: any): void {\r\n\r\n        let columns: number = argv.columns || 10;\r\n        let schema: string = argv.schema || 'dbo';\r\n        let table: string = argv.table || 'test_table';\r\n        let random: boolean = argv.random || false;\r\n        this.qualifiedName = `${schema}.${table}`;\r\n\r\n        this.dropSql = `\r\nIF OBJECT_ID('${this.qualifiedName}', 'U') IS NOT NULL\r\n    DROP TABLE ${this.qualifiedName}\r\n`;\r\n        let cols:string[] = [];\r\n        for (let i = 0; i < columns; ++i) {\r\n            cols[cols.length] = random ? TableGenerator.randomCol(i) : TableGenerator.roundRobinCol(i);\r\n        }\r\n\r\n        let body = cols.join(',\\n\\t');\r\n        this.defSql = `\r\nCREATE TABLE ${this.qualifiedName} (\r\n    ${body},\r\n    ID int NOT NULL,\r\n    PRIMARY KEY (ID)\r\n);`;\r\n    }\r\n}\r\n\r\nlet help:boolean = argv.h || argv.help || false;\r\nif (help) {\r\n    console.log('create a test definition and / or populate with n rows of random data');\r\n    console.log('node samples\\\\typescript\\\\table-gen.js --create --populate=30000 --columns=40');\r\n    console.log('node samples\\\\typescript\\\\table-gen.js --schema=dbo --table=test_table --create --populate=30000 --columns=40');\r\n}else {\r\n    let g = new TableGenerator();\r\n    g.run().then(() => {\r\n        let s = g.defSql;\r\n        console.log(s);\r\n    }).catch(e => {\r\n        console.log(e)\r\n    });\r\n}\r\n\r\n"]}